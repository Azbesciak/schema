---
"$schema": https://json-schema.org/draft/2020-12/schema
title: Overture Maps Transportation Segment Schema
description: Common schema definitions shared by all themes
"$defs":
  propertyDefinitions:
    level:
      description: Z-order of the feature where 0 is visual level
      type: integer
      default: 0
    featureType:
      description: Specific feature type within the theme
      type: string
      enum:
        - connector
        - footprint
        - segment
    featureUpdateTime:
      description: Timestamp when the feature was last updated
      type: string
      format: date-time
      pattern: ^[1-9]\d{3}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(Z|[-+]\d{2}:\d{2})$
      "$comment": >-
        Pattern is used as a fallback because not all JSON schema
        implementations treat "format" as an assertion, for some it is
        only an annotation.

        A somewhat more compact approach would be to reference the
        Overture version where the feature last changed instead of the
        update time, and expect clients to do a lookup if they really
        care about the time.
    featureVersion:
      description: >-
        Version number of the feature, incremented in each Overture
        release where the geometry or attributes of this feature
        changed.
      type: integer
      minValue: 0
      "$comment": >-
        It might be reasonable to combine "updateTime" and "version"
        in a single "updateVersion" field which gives the last Overture
        version number in which the feature changed. The downside to
        doing this is that the number would cease to be indicative of
        the "rate of change" of the feature.
    theme:
      description: Top-level Overture theme this feature belongs to
      type: string
      enum: [buildings, transportation]
    linearlyReferencedPosition:
      description: >-
        Represents a linearly-referenced position between 0% and 100% of
        the distance along a path such as a road segment or a river
        center-line segment.
      type: number
      minValue: 0
      maxValue: 1
      "$comment": >-
        One possible advantage to using percentages over absolute
        distances is being able to trivially validate that the position
        lies "on" its segment (i.e. is between zero and one). Of course,
        this level of validity doesn't mean the number isn't nonsense.
    linearlyReferencedRange:
      description:
        Represents a non-empty range of positions along a path as a pair
        linearly-referenced positions. For example, the pair [0.25, 0.5]
        represents the range beginning 25% of the distance from the
        start of the path and ending 50% oof the distance from the path
        start.
      type: array
      items: { "$ref": "#/$defs/propertyDefinitions/linearlyReferencedPosition" }
      minItems: 2
      maxItems: 2
      uniqueItems: true
      "$comment":
        Ideally we would enforce sorted order of this pair, but sorting
        assertions aren't (yet?) supported by JSON schema.
    openingHours:
      description: >-
        Time span or time spans during which something is open or
        active, specified in the OSM opening hours specification:
          https://wiki.openstreetmap.org/wiki/Key:opening_hours/specification
      type: string
      pattern: ^Mo-Sa 09:00-12:00( closed)?, We 15:00-18:00( closed)?$
      "$comment": >-
          The "pattern" is just a placeholder. We assume we can
          specify a regular expression to give *some* degree of
          initial lexical validation, but higher-level validation
          will have to be done outside of JSON schema.

          Reasons for using the OSM opening hours specification for
          transportation rule time restrictions are documented in
          https://github.com/OvertureMaps/schema-wg/pull/10
    locale:
      description: >-
        Locale according to definitions in IETF-BCP47 https://www.rfc-editor.org/rfc/bcp/bcp47.txt.
        Locales are formatted as "language-script". In some cases the script may be omitted when
        it is standard for the language by using the "Suppress-Script" property in
        https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry
      type: string
      enum: [local, en, es, ar, he, ru]
    nameProperty:
      type: object
      required: [name, locale]
      unevaluatedProperties: false
      properties:
        name:
          type: string
        locale: { "$ref": "#/$defs/propertyDefinitions/locale" }
    names:
      type: object
      required: [standard]
      properties:
        standard:
          type: array
          items: { "$ref": "#/$defs/propertyDefinitions/nameProperty" }
          minItems: 1
        official:
          type: array
          items: { "$ref": "#/$defs/propertyDefinitions/nameProperty" }
          minItems: 1
        alternate:
          type: array
          items: { "$ref": "#/$defs/propertyDefinitions/nameProperty" }
          minItems: 1
        short:
          type: array
          items: { "$ref": "#/$defs/propertyDefinitions/nameProperty" }
          minItems: 1

  propertyContainers:
    overtureFeaturePropertiesContainer:
      description: Top-level properties shared by all Overture features
      type: object
      required: [ theme, type, version, updateTime ]
      patternProperties:
        ^ext.*$: true
      properties:
        theme: { "$ref": "#/$defs/propertyDefinitions/theme" }
        type: { "$ref": "#/$defs/propertyDefinitions/featureType" }
        version: { "$ref": "#/$defs/propertyDefinitions/featureVersion" }
        updateTime: { "$ref": "#/$defs/propertyDefinitions/featureUpdateTime" }
    levelContainer:
      description: Properties defining feature Z-order, i.e., stacking order
      type: object
      properties:
        level:
          "$ref": "#/$defs/propertyDefinitions/level"
