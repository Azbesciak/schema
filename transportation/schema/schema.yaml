---
"$schema": https://json-schema.org/draft/2020-12/schema
title: Overture Maps Feature Schema
description: >-
  Prototype schema for Overture Maps Foundation map entities as GeoJSON
  schemas.
type: object
unevaluatedProperties: false
allOf:
  - "$ref": https://geojson.org/schema/Feature.json
    "$comment": Every Overture feature IS A GeoJSON feature
oneOf:
  - if:
      properties:
        properties:
          properties:
            theme: { enum: [buildings] }
            type: { enum: [footprint] }
    then: { "$ref": buildings/footprint.yaml }
    else: { propertyNames: false }
  - if:
      properties:
        properties:
          properties:
            theme: { enum: [transportation] }
            type: { enum: [connector] }
    then: { "$ref": transportation/connector.yaml }
    else: { propertyNames: false }
  - if:
      properties:
        properties:
          properties:
            theme: { enum: [transportation] }
            type: { enum: [segment] }
    then: { "$ref": transportation/segment.yaml }
    else: { propertyNames: false }
properties:
  properties:
    "$comment": >-
      The top-level properties listed here are those that are broadly
      applicable to all Overture feature types across themes.
      
      A few other top-level feature types that are on the radar and which
      might be included at the top level include: a localized default or
      display name (flat); an 18n naming structure (map:string->string);
      and details about feature version, update timestamp, and lineage.
      
      Please note that there is no GERS ID property under properties,
      because GeoJSON already has an "id" attribute at the top level of
      the feature object. It's up there somewhere! ðŸ‘†
    type: object
    required: [theme, type]
    unevaluatedProperties: false
    properties:
      theme:
        description: Top-level Overture theme this feature belongs to
        type: string
        enum: [buildings, transportation]
      type:
        description: Specific feature type within the theme
        type: string
        oneOf:
          - if: { properties: { theme: { enum: [ buildings ]}}}
            then: { enum: [footprint] }
          - if: { properties: { theme: { enum: [ buildings ]}}}
            then: { enum: [connector, segment] }
      level:
        description: Z-order of the feature where 0 is visual level
        type: integer
        default: 0
    patternProperties:
      ^ext.*$: true
