---
"$schema": https://json-schema.org/draft/2020-12/schema
title: Overture Maps Transportation Segment Schema
description: Additive schema for transportation segments
type: object
properties:
  geometry:
    unevaluatedProperties: false
    allOf:
      - "$ref": https://geojson.org/schema/LineString.json
  properties:
    unevaluatedProperties: false
    required: [subType]
    allOf:
      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer
      - "$ref": ../defs.yaml#/$defs/propertyContainers/levelContainer
      - allOf:
          - if: { properties: { subType: { enum: [road] } } }
            then:
              properties:
                road: { "$ref": "#/$defs/propertyDefinitions/road" }
    properties:
      subType:
        description: Broad category of transportation segment.
        type: string
        enum: [road, rail, water]
        "$comment": >-
          Should not be confused with a transport mode. A segment
          kind has an (implied) set of default transport modes.
      directionality:
        description: Rules stipulating direction of travel along the segment
        type: array
        items:
          description: One instance of a direction rule
          type: object
          unevaluatedProperties: false
          allOf:
            - "$ref": "#/$defs/propertyContainers/applyDuringContainer"
          required:
            - direction
          properties:
            direction:
              description: Direction or directions allowed by this rule
              type: string
              enum: [ bothWays, forward, backward, alternating, reversible ]
        minItems: 1
        default:
          - rule: bothWays
      connectors:
        description: >-
          List of connector nodes this segment is physically connected
          to.
        type: array
        items:
          type: string
          pattern: ^[a-z]+Connector$
          "$comment": >-
            Pattern is just a placeholder. Each entry in this array is
            the GERS ID of a transportation connector feature.
        uniqueItems: true
        default: []
"$defs":
  propertyDefinitions:
    mode:
      description: >-
        Enumerates possible travel modes. Some modes represent groups
        of modes.
      type: string
      enum: [ motorVehicle, car, truck, motorcycle, foot, bicycle ]
      "$comment": >-
        motorVehicle includes car, truck and motorcycle
    road:
      description: >-
        Properties for segments whose segment subType is road. The road
        subType includes any variety of road, street, or path, including
        dedicated paths for walking and cycling.
      type: object
      unevaluatedProperties: false
      default: {}
      properties:
        class:
          description: >-
            Captures the kind of road and its position in the road
            network hierarchy.
          type: string
          enum:
            - unknown
            - primary
            - secondary
            - tertiary
            - residential
            - parkingAisle
            - driveway
            - footway
            - cycleway
          default:
            enum: [ unknown ]
        surface:
          description: Physical surface of the road
          type: string
          enum:
            - unknown
            - paved
            - unpaved
            - gravel
            - dirt
            - pavingStones
            - metal
          default:
            enum: [unknown]
          "$comment": >-
            We should likely restrict the available surface types to
            the subset of the common OSM surface=* tag values that are
            useful both for routing and for map tile rendering.
        flags:
          description: Set of boolean attributes applicable to roads
          type: array
          items:
            type: string
            enum:
              - isLink
              - isTunnel
              - isPrivate
              - isTolled
          uniqueItems: true
          default: []
        restrictions:
          descriptions: Restrictions on how the road may be used
          type: object
          allOf:
            - "$ref": "#/$defs/propertyContainers/modesContainer"
          unevaluatedProperties: false
          properties:
            speedLimits:
              description: Rules governing speed on this road segment
              type: array
              items:
                description: An individual speed limit rule
                "$comment": >-
                  TODO: Speed limits probably have directionality, so
                  should factor out a directionContainer for this
                  purpose and use it to introduce an optional
                  direction property in each rule.
                type: object
                anyOf:
                  - required: [minSpeed]
                  - required: [maxSpeed]
                allOf:
                  - "$ref": "#/$defs/propertyContainers/modesContainer"
                  - "$ref": "#/$defs/propertyContainers/applyAtRangeContainer"
                  - "$ref": "#/$defs/propertyContainers/applyDuringContainer"
                unevaluatedProperties: false
                properties:
                  minSpeed: { "$ref": "#/$defs/propertyDefinitions/speed" }
                  maxSpeed: { "$ref": "#/$defs/propertyDefinitions/speed" }
                  isMaxSpeedVariable:
                    description: Indicates a variable speed corridor
                    type: boolean
                    default: false
            sizeLimits:
              description: Rules governing vehicle size on this road segment
              type: array
              items:
                description: An individual vehicle size rule
                "$comment": >-
                  TODO: Is there a directionality aspect to vehicle
                  size limits, similar to speed limits? Or at that
                  point should we just split into two unidirectional
                  segments?
                type: object
                allOf:
                  - "$ref": "#/$defs/propertyContainers/applyAtRangeContainer"
                anyOf:
                  - required: [maxHeightMeters]
                  - required: [maxWidthMaters]
                  - required: [maxWeightKilograms]
                unevaluatedProperties: false
                properties:
                  maxHeightMeters:
                    type: number
                    minValueExclusive: 0
                  maxWidthMeters:
                    type: number
                    minValueExclusive: 0
                  maxWeightKilograms:
                    type: number
                    minValueExclusive: 0
    speed:
      description: >-
        A speed value, i.e. a certain number of distance units
        travelled per unit time.
      type: array
      prefixItems:
        - description: Number of speed units
          type: integer
          minValue: 20
        - description: One speed unit
          type: string
          enum: [ "km/h", "mph" ]
      additionalItems: false
  propertyContainers:
    applyAtPositionContainer:
      description: >-
        Properties defining the discrete position on the segment where
        a rule is active.
      properties:
        applyAt:
          "$ref": ../defs.yaml#/$defs/propertyDefinitions/linearlyReferencedPosition
    applyAtRangeContainer:
      description: >-
        Properties defining the range of positions on the segment where
        a rule is active.
      properties:
        applyAt:
          "$ref": ../defs.yaml#/$defs/propertyDefinitions/linearlyReferencedRange
    applyDuringContainer:
      "$comment": >-
        Properties defining the time spans when a recurring rule is
        active.
      properties:
        applyDuring:
          "$ref": ../defs.yaml#/$defs/propertyDefinitions/openingHours
    modesContainer:
      description: >-
        Properties defining travel modes for which a rule is active.
      type: object
      oneOf:
        - not:
            anyOf:
              - required: [modes]
              - required: [notModes]
        - required: [modes]
          properties:
            modes:
              description: Travel modes to which the rule applies
              type: array
              items:
                "$ref": "#/$defs/propertyDefinitions/mode"
              uniqueItems: true
              minLength: 1
        - required: [notModes]
          properties:
            notModes:
              description: Travel modes to which the rule does not apply
              type: array
              items:
                "$ref": "#/$defs/propertyDefinitions/mode"
              uniqueItems: true
              minLength: 1
      "$comment": >-
        If neither modes nor notModes is specified, the rule has the
        default travel modes for the segment subType.
